// Copyright (c) SandboxAQ. All rights reserved.
// SPDX-License-Identifier: AGPL-3.0-only

// Error defines all errors that may happen when using the Sandwich Go library.
// It uses the error codes defined in the protobuf.
package sandwich

import "C"

import (
	"fmt"

	pb "github.com/sandbox-quantum/sandwich/go/proto/sandwich"
)

// createError creates a chain of errors, returned from Sandwich.
func createError(chain *C.struct_SandwichError) error \{
	var root Error = nil
	var cur Error = nil
	for chain != nil \{
		if _, ok := pb.ErrorKind_name[int32(chain.kind)]; ok \{
			var e Error = nil
			var msg string = C.GoString(chain.msg)
			switch pb.ErrorKind(chain.kind) \{
{{ for symbol in symbols }}{{ if symbol.trailing_comment }}      case pb.ErrorKind_{symbol.trailing_comment}:
        e = new{symbol.name}(pb.{symbol.name}(chain.code), msg)
{{ endif }}{{ endfor }}      }
			if root == nil \{
				root = e
				cur = e
			} else \{
				cur.setDetails(e)
				cur = e
			}
			chain = chain.details
		}
	}
	return root
}

// errorKindMap is a map code -> string for error kinds, defined in
// `errors.proto`, enum `ErrorKind`.
var errorKindMap = map[pb.ErrorKind]string\{
{{ for symbol in symbols }}{{ if symbol.trailing_comment }}  pb.ErrorKind_{symbol.trailing_comment}: `{symbol.leading_comment}`,
{{ endif }}{{ endfor}}}


{{ for symbol in symbols }}{{ if symbol.trailing_comment }}type {symbol.name} struct \{
  BaseError
}

var err{symbol.name}Map = map[pb.{symbol.name}]string\{
{{for v in symbol.values }}  pb.{symbol.name}_{v.name}: `{v.leading_comment}`,
{{ endfor }}}

func new{symbol.name}(code pb.{symbol.name}, msg string) *{symbol.name} \{
	err_msg := ";"
	if msg != "" \{
		err_msg = "; " + msg
	}
	var m string
	if val, ok := err{symbol.name}Map[code]; ok \{
		m = val
	} else \{
		m = fmt.Sprintf(`unknown '{symbol.leading_comment}' error code %d`, int32(code))
	}
	return &{symbol.name}\{
		BaseError\{
			msg:  m + err_msg,
			code: int32(code),
		},
	}
}
{{ endif }}{{ endfor }}
