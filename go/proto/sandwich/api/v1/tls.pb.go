// Copyright 2023 SandboxAQ
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: proto/api/v1/tls.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type X509Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate *Certificate `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	PrivateKey  *PrivateKey  `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *X509Identity) Reset() {
	*x = X509Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_v1_tls_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509Identity) ProtoMessage() {}

func (x *X509Identity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_v1_tls_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509Identity.ProtoReflect.Descriptor instead.
func (*X509Identity) Descriptor() ([]byte, []int) {
	return file_proto_api_v1_tls_proto_rawDescGZIP(), []int{0}
}

func (x *X509Identity) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *X509Identity) GetPrivateKey() *PrivateKey {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type TLSOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kem []string `protobuf:"bytes,1,rep,name=kem,proto3" json:"kem,omitempty"`
	// Types that are assignable to PeerVerifier:
	//	*TLSOptions_X509Verifier
	//	*TLSOptions_EmptyVerifier
	PeerVerifier isTLSOptions_PeerVerifier `protobuf_oneof:"peer_verifier"`
	Identity     *X509Identity             `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	AlpnProtocol []string                  `protobuf:"bytes,6,rep,name=alpn_protocol,json=alpnProtocol,proto3" json:"alpn_protocol,omitempty"`
}

func (x *TLSOptions) Reset() {
	*x = TLSOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_v1_tls_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSOptions) ProtoMessage() {}

func (x *TLSOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_v1_tls_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSOptions.ProtoReflect.Descriptor instead.
func (*TLSOptions) Descriptor() ([]byte, []int) {
	return file_proto_api_v1_tls_proto_rawDescGZIP(), []int{1}
}

func (x *TLSOptions) GetKem() []string {
	if x != nil {
		return x.Kem
	}
	return nil
}

func (m *TLSOptions) GetPeerVerifier() isTLSOptions_PeerVerifier {
	if m != nil {
		return m.PeerVerifier
	}
	return nil
}

func (x *TLSOptions) GetX509Verifier() *X509Verifier {
	if x, ok := x.GetPeerVerifier().(*TLSOptions_X509Verifier); ok {
		return x.X509Verifier
	}
	return nil
}

func (x *TLSOptions) GetEmptyVerifier() *EmptyVerifier {
	if x, ok := x.GetPeerVerifier().(*TLSOptions_EmptyVerifier); ok {
		return x.EmptyVerifier
	}
	return nil
}

func (x *TLSOptions) GetIdentity() *X509Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *TLSOptions) GetAlpnProtocol() []string {
	if x != nil {
		return x.AlpnProtocol
	}
	return nil
}

type isTLSOptions_PeerVerifier interface {
	isTLSOptions_PeerVerifier()
}

type TLSOptions_X509Verifier struct {
	X509Verifier *X509Verifier `protobuf:"bytes,3,opt,name=x509_verifier,json=x509Verifier,proto3,oneof"`
}

type TLSOptions_EmptyVerifier struct {
	EmptyVerifier *EmptyVerifier `protobuf:"bytes,4,opt,name=empty_verifier,json=emptyVerifier,proto3,oneof"`
}

func (*TLSOptions_X509Verifier) isTLSOptions_PeerVerifier() {}

func (*TLSOptions_EmptyVerifier) isTLSOptions_PeerVerifier() {}

type TLSClientOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonOptions *TLSOptions `protobuf:"bytes,1,opt,name=common_options,json=commonOptions,proto3" json:"common_options,omitempty"`
}

func (x *TLSClientOptions) Reset() {
	*x = TLSClientOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_v1_tls_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSClientOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSClientOptions) ProtoMessage() {}

func (x *TLSClientOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_v1_tls_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSClientOptions.ProtoReflect.Descriptor instead.
func (*TLSClientOptions) Descriptor() ([]byte, []int) {
	return file_proto_api_v1_tls_proto_rawDescGZIP(), []int{2}
}

func (x *TLSClientOptions) GetCommonOptions() *TLSOptions {
	if x != nil {
		return x.CommonOptions
	}
	return nil
}

type TLSServerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonOptions *TLSOptions `protobuf:"bytes,1,opt,name=common_options,json=commonOptions,proto3" json:"common_options,omitempty"`
}

func (x *TLSServerOptions) Reset() {
	*x = TLSServerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_v1_tls_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSServerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSServerOptions) ProtoMessage() {}

func (x *TLSServerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_v1_tls_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSServerOptions.ProtoReflect.Descriptor instead.
func (*TLSServerOptions) Descriptor() ([]byte, []int) {
	return file_proto_api_v1_tls_proto_rawDescGZIP(), []int{3}
}

func (x *TLSServerOptions) GetCommonOptions() *TLSOptions {
	if x != nil {
		return x.CommonOptions
	}
	return nil
}

var File_proto_api_v1_tls_proto protoreflect.FileDescriptor

var file_proto_api_v1_tls_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x73, 0x61, 0x71, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x58, 0x35, 0x30, 0x39, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x48, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x61, 0x71, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x61, 0x71, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x22, 0xbc, 0x02, 0x0a, 0x0a, 0x54, 0x4c, 0x53, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x6d, 0x12, 0x4e, 0x0a, 0x0d, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x61, 0x71, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x78, 0x35, 0x30, 0x39, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x61, 0x71, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x61, 0x71,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x6c, 0x70, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x70, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0x60, 0x0a, 0x10, 0x54, 0x4c, 0x53, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x61, 0x71, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x4c, 0x53, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x60, 0x0a, 0x10, 0x54, 0x4c, 0x53, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x61, 0x71, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x4c,
	0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x2d, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x75, 0x6d, 0x2f, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2f, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_api_v1_tls_proto_rawDescOnce sync.Once
	file_proto_api_v1_tls_proto_rawDescData = file_proto_api_v1_tls_proto_rawDesc
)

func file_proto_api_v1_tls_proto_rawDescGZIP() []byte {
	file_proto_api_v1_tls_proto_rawDescOnce.Do(func() {
		file_proto_api_v1_tls_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_api_v1_tls_proto_rawDescData)
	})
	return file_proto_api_v1_tls_proto_rawDescData
}

var file_proto_api_v1_tls_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_api_v1_tls_proto_goTypes = []interface{}{
	(*X509Identity)(nil),     // 0: saq.sandwich.proto.api.v1.X509Identity
	(*TLSOptions)(nil),       // 1: saq.sandwich.proto.api.v1.TLSOptions
	(*TLSClientOptions)(nil), // 2: saq.sandwich.proto.api.v1.TLSClientOptions
	(*TLSServerOptions)(nil), // 3: saq.sandwich.proto.api.v1.TLSServerOptions
	(*Certificate)(nil),      // 4: saq.sandwich.proto.api.v1.Certificate
	(*PrivateKey)(nil),       // 5: saq.sandwich.proto.api.v1.PrivateKey
	(*X509Verifier)(nil),     // 6: saq.sandwich.proto.api.v1.X509Verifier
	(*EmptyVerifier)(nil),    // 7: saq.sandwich.proto.api.v1.EmptyVerifier
}
var file_proto_api_v1_tls_proto_depIdxs = []int32{
	4, // 0: saq.sandwich.proto.api.v1.X509Identity.certificate:type_name -> saq.sandwich.proto.api.v1.Certificate
	5, // 1: saq.sandwich.proto.api.v1.X509Identity.private_key:type_name -> saq.sandwich.proto.api.v1.PrivateKey
	6, // 2: saq.sandwich.proto.api.v1.TLSOptions.x509_verifier:type_name -> saq.sandwich.proto.api.v1.X509Verifier
	7, // 3: saq.sandwich.proto.api.v1.TLSOptions.empty_verifier:type_name -> saq.sandwich.proto.api.v1.EmptyVerifier
	0, // 4: saq.sandwich.proto.api.v1.TLSOptions.identity:type_name -> saq.sandwich.proto.api.v1.X509Identity
	1, // 5: saq.sandwich.proto.api.v1.TLSClientOptions.common_options:type_name -> saq.sandwich.proto.api.v1.TLSOptions
	1, // 6: saq.sandwich.proto.api.v1.TLSServerOptions.common_options:type_name -> saq.sandwich.proto.api.v1.TLSOptions
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_proto_api_v1_tls_proto_init() }
func file_proto_api_v1_tls_proto_init() {
	if File_proto_api_v1_tls_proto != nil {
		return
	}
	file_proto_api_v1_certificate_proto_init()
	file_proto_api_v1_private_key_proto_init()
	file_proto_api_v1_verifiers_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_api_v1_tls_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*X509Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_v1_tls_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_v1_tls_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSClientOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_v1_tls_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSServerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_api_v1_tls_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TLSOptions_X509Verifier)(nil),
		(*TLSOptions_EmptyVerifier)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_api_v1_tls_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_api_v1_tls_proto_goTypes,
		DependencyIndexes: file_proto_api_v1_tls_proto_depIdxs,
		MessageInfos:      file_proto_api_v1_tls_proto_msgTypes,
	}.Build()
	File_proto_api_v1_tls_proto = out.File
	file_proto_api_v1_tls_proto_rawDesc = nil
	file_proto_api_v1_tls_proto_goTypes = nil
	file_proto_api_v1_tls_proto_depIdxs = nil
}
