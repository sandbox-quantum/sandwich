// Copyright 2023 SandboxAQ
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: proto/errors.proto

package sandwich

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Error int32

const (
	Error_ERROR_OK                               Error = 0
	Error_ERROR_INVALID_ARGUMENT                 Error = 1
	Error_ERROR_MEMORY                           Error = 2
	Error_ERROR_IO                               Error = 3
	Error_ERROR_UNKNOWN                          Error = 4
	Error_ERROR_INVALID_CONFIGURATION            Error = 5
	Error_ERROR_UNSUPPORTED_IMPLEMENTATION       Error = 6
	Error_ERROR_UNSUPPORTED_PROTOCOL             Error = 7
	Error_ERROR_IMPLEMENTATION_PROTOCOL_MISMATCH Error = 8
	Error_ERROR_PROTOBUF                         Error = 9
	Error_ERROR_NETWORK_INVALID_ADDRESS          Error = 10
	Error_ERROR_NETWORK_INVALID_PORT             Error = 11
	Error_ERROR_INVALID_CONTEXT                  Error = 12
	Error_ERROR_BAD_FD                           Error = 13
	Error_ERROR_UNSUPPORTED_TUNNEL_METHOD        Error = 14
	Error_ERROR_INTEGER_OVERFLOW                 Error = 15
	Error_ERROR_MEMORY_OVERFLOW                  Error = 16
	Error_ERROR_IMPLEMENTATION                   Error = 17
	Error_ERROR_INVALID_TUNNEL                   Error = 18
	Error_ERROR_INVALID_KEM                      Error = 19
	Error_ERROR_TIMEOUT                          Error = 20
	Error_ERROR_NETWORK_ADDRESS_RESOLVE          Error = 21
	Error_ERROR_NETWORK_CONNECT                  Error = 22
	Error_ERROR_SOCKET_FAILED                    Error = 23
	Error_ERROR_SOCKET_OPT_FAILED                Error = 24
	Error_ERROR_SOCKET_INVALID_AI_FAMILY         Error = 25
	Error_ERROR_CONNECTION_REFUSED               Error = 26
	Error_ERROR_NETWORK_UNREACHABLE              Error = 27
	Error_ERROR_SOCKET_POLL_FAILED               Error = 28
	Error_ERROR_INVALID_CERTIFICATE              Error = 29
	Error_ERROR_UNSUPPORTED_CERTIFICATE          Error = 30
	Error_ERROR_INVALID_PRIVATE_KEY              Error = 31
	Error_ERROR_UNSUPPORTED_PRIVATE_KEY          Error = 32
	Error_ERROR_UNSUPPORTED_PROTOCOL_VERSION     Error = 33
)

// Enum value maps for Error.
var (
	Error_name = map[int32]string{
		0:  "ERROR_OK",
		1:  "ERROR_INVALID_ARGUMENT",
		2:  "ERROR_MEMORY",
		3:  "ERROR_IO",
		4:  "ERROR_UNKNOWN",
		5:  "ERROR_INVALID_CONFIGURATION",
		6:  "ERROR_UNSUPPORTED_IMPLEMENTATION",
		7:  "ERROR_UNSUPPORTED_PROTOCOL",
		8:  "ERROR_IMPLEMENTATION_PROTOCOL_MISMATCH",
		9:  "ERROR_PROTOBUF",
		10: "ERROR_NETWORK_INVALID_ADDRESS",
		11: "ERROR_NETWORK_INVALID_PORT",
		12: "ERROR_INVALID_CONTEXT",
		13: "ERROR_BAD_FD",
		14: "ERROR_UNSUPPORTED_TUNNEL_METHOD",
		15: "ERROR_INTEGER_OVERFLOW",
		16: "ERROR_MEMORY_OVERFLOW",
		17: "ERROR_IMPLEMENTATION",
		18: "ERROR_INVALID_TUNNEL",
		19: "ERROR_INVALID_KEM",
		20: "ERROR_TIMEOUT",
		21: "ERROR_NETWORK_ADDRESS_RESOLVE",
		22: "ERROR_NETWORK_CONNECT",
		23: "ERROR_SOCKET_FAILED",
		24: "ERROR_SOCKET_OPT_FAILED",
		25: "ERROR_SOCKET_INVALID_AI_FAMILY",
		26: "ERROR_CONNECTION_REFUSED",
		27: "ERROR_NETWORK_UNREACHABLE",
		28: "ERROR_SOCKET_POLL_FAILED",
		29: "ERROR_INVALID_CERTIFICATE",
		30: "ERROR_UNSUPPORTED_CERTIFICATE",
		31: "ERROR_INVALID_PRIVATE_KEY",
		32: "ERROR_UNSUPPORTED_PRIVATE_KEY",
		33: "ERROR_UNSUPPORTED_PROTOCOL_VERSION",
	}
	Error_value = map[string]int32{
		"ERROR_OK":                               0,
		"ERROR_INVALID_ARGUMENT":                 1,
		"ERROR_MEMORY":                           2,
		"ERROR_IO":                               3,
		"ERROR_UNKNOWN":                          4,
		"ERROR_INVALID_CONFIGURATION":            5,
		"ERROR_UNSUPPORTED_IMPLEMENTATION":       6,
		"ERROR_UNSUPPORTED_PROTOCOL":             7,
		"ERROR_IMPLEMENTATION_PROTOCOL_MISMATCH": 8,
		"ERROR_PROTOBUF":                         9,
		"ERROR_NETWORK_INVALID_ADDRESS":          10,
		"ERROR_NETWORK_INVALID_PORT":             11,
		"ERROR_INVALID_CONTEXT":                  12,
		"ERROR_BAD_FD":                           13,
		"ERROR_UNSUPPORTED_TUNNEL_METHOD":        14,
		"ERROR_INTEGER_OVERFLOW":                 15,
		"ERROR_MEMORY_OVERFLOW":                  16,
		"ERROR_IMPLEMENTATION":                   17,
		"ERROR_INVALID_TUNNEL":                   18,
		"ERROR_INVALID_KEM":                      19,
		"ERROR_TIMEOUT":                          20,
		"ERROR_NETWORK_ADDRESS_RESOLVE":          21,
		"ERROR_NETWORK_CONNECT":                  22,
		"ERROR_SOCKET_FAILED":                    23,
		"ERROR_SOCKET_OPT_FAILED":                24,
		"ERROR_SOCKET_INVALID_AI_FAMILY":         25,
		"ERROR_CONNECTION_REFUSED":               26,
		"ERROR_NETWORK_UNREACHABLE":              27,
		"ERROR_SOCKET_POLL_FAILED":               28,
		"ERROR_INVALID_CERTIFICATE":              29,
		"ERROR_UNSUPPORTED_CERTIFICATE":          30,
		"ERROR_INVALID_PRIVATE_KEY":              31,
		"ERROR_UNSUPPORTED_PRIVATE_KEY":          32,
		"ERROR_UNSUPPORTED_PROTOCOL_VERSION":     33,
	}
)

func (x Error) Enum() *Error {
	p := new(Error)
	*p = x
	return p
}

func (x Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error) Descriptor() protoreflect.EnumDescriptor {
	return file_saq_pqc_sandwich_proto_errors_proto_enumTypes[0].Descriptor()
}

func (Error) Type() protoreflect.EnumType {
	return &file_saq_pqc_sandwich_proto_errors_proto_enumTypes[0]
}

func (x Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error.Descriptor instead.
func (Error) EnumDescriptor() ([]byte, []int) {
	return file_saq_pqc_sandwich_proto_errors_proto_rawDescGZIP(), []int{0}
}

var File_saq_pqc_sandwich_proto_errors_proto protoreflect.FileDescriptor

var file_saq_pqc_sandwich_proto_errors_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x61, 0x71, 0x2f, 0x70, 0x71, 0x63, 0x2f, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x73, 0x61, 0x71, 0x2e, 0x70, 0x71, 0x63, 0x2e, 0x73,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xd4, 0x07,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52,
	0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4f, 0x10,
	0x03, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4d, 0x49, 0x53,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x0a, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0b, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x46, 0x44, 0x10, 0x0d, 0x12, 0x23, 0x0a, 0x1f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x0e,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45,
	0x52, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x11, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x4d,
	0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x10, 0x14, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x10, 0x15, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x54,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x18, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x41, 0x49, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x10, 0x19, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x1b, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x1c, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x1d, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x52,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x1e, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x1f, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x20, 0x12, 0x26, 0x0a, 0x22,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x21, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_saq_pqc_sandwich_proto_errors_proto_rawDescOnce sync.Once
	file_saq_pqc_sandwich_proto_errors_proto_rawDescData = file_saq_pqc_sandwich_proto_errors_proto_rawDesc
)

func file_saq_pqc_sandwich_proto_errors_proto_rawDescGZIP() []byte {
	file_saq_pqc_sandwich_proto_errors_proto_rawDescOnce.Do(func() {
		file_saq_pqc_sandwich_proto_errors_proto_rawDescData = protoimpl.X.CompressGZIP(file_saq_pqc_sandwich_proto_errors_proto_rawDescData)
	})
	return file_saq_pqc_sandwich_proto_errors_proto_rawDescData
}

var file_saq_pqc_sandwich_proto_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_saq_pqc_sandwich_proto_errors_proto_goTypes = []interface{}{
	(Error)(0), // 0: saq.sandwich.proto.Error
}
var file_saq_pqc_sandwich_proto_errors_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_saq_pqc_sandwich_proto_errors_proto_init() }
func file_saq_pqc_sandwich_proto_errors_proto_init() {
	if File_saq_pqc_sandwich_proto_errors_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_saq_pqc_sandwich_proto_errors_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_saq_pqc_sandwich_proto_errors_proto_goTypes,
		DependencyIndexes: file_saq_pqc_sandwich_proto_errors_proto_depIdxs,
		EnumInfos:         file_saq_pqc_sandwich_proto_errors_proto_enumTypes,
	}.Build()
	File_saq_pqc_sandwich_proto_errors_proto = out.File
	file_saq_pqc_sandwich_proto_errors_proto_rawDesc = nil
	file_saq_pqc_sandwich_proto_errors_proto_goTypes = nil
	file_saq_pqc_sandwich_proto_errors_proto_depIdxs = nil
}
