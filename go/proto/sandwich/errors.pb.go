// Copyright 2023 SandboxAQ
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: proto/errors.proto

package sandwich

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type APIError int32

const (
	APIError_APIERROR_CONFIGURATION APIError = 0
	APIError_APIERROR_SOCKET        APIError = 1
	APIError_APIERROR_TUNNEL        APIError = 2
)

// Enum value maps for APIError.
var (
	APIError_name = map[int32]string{
		0: "APIERROR_CONFIGURATION",
		1: "APIERROR_SOCKET",
		2: "APIERROR_TUNNEL",
	}
	APIError_value = map[string]int32{
		"APIERROR_CONFIGURATION": 0,
		"APIERROR_SOCKET":        1,
		"APIERROR_TUNNEL":        2,
	}
)

func (x APIError) Enum() *APIError {
	p := new(APIError)
	*p = x
	return p
}

func (x APIError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APIError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[0].Descriptor()
}

func (APIError) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[0]
}

func (x APIError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APIError.Descriptor instead.
func (APIError) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{0}
}

type ConfigurationError int32

const (
	ConfigurationError_CONFIGURATIONERROR_INVALID_IMPLEMENTATION     ConfigurationError = 0
	ConfigurationError_CONFIGURATIONERROR_UNSUPPORTED_IMPLEMENTATION ConfigurationError = 1
	ConfigurationError_CONFIGURATIONERROR_INVALID                    ConfigurationError = 2
)

// Enum value maps for ConfigurationError.
var (
	ConfigurationError_name = map[int32]string{
		0: "CONFIGURATIONERROR_INVALID_IMPLEMENTATION",
		1: "CONFIGURATIONERROR_UNSUPPORTED_IMPLEMENTATION",
		2: "CONFIGURATIONERROR_INVALID",
	}
	ConfigurationError_value = map[string]int32{
		"CONFIGURATIONERROR_INVALID_IMPLEMENTATION":     0,
		"CONFIGURATIONERROR_UNSUPPORTED_IMPLEMENTATION": 1,
		"CONFIGURATIONERROR_INVALID":                    2,
	}
)

func (x ConfigurationError) Enum() *ConfigurationError {
	p := new(ConfigurationError)
	*p = x
	return p
}

func (x ConfigurationError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigurationError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[1].Descriptor()
}

func (ConfigurationError) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[1]
}

func (x ConfigurationError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigurationError.Descriptor instead.
func (ConfigurationError) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{1}
}

type ProtobufError int32

const (
	ProtobufError_PROTOBUFERROR_EMPTY        ProtobufError = 0
	ProtobufError_PROTOBUFERROR_TOO_BIG      ProtobufError = 1
	ProtobufError_PROTOBUFERROR_PARSE_FAILED ProtobufError = 2
	ProtobufError_PROTOBUFERROR_NULLPTR      ProtobufError = 3
)

// Enum value maps for ProtobufError.
var (
	ProtobufError_name = map[int32]string{
		0: "PROTOBUFERROR_EMPTY",
		1: "PROTOBUFERROR_TOO_BIG",
		2: "PROTOBUFERROR_PARSE_FAILED",
		3: "PROTOBUFERROR_NULLPTR",
	}
	ProtobufError_value = map[string]int32{
		"PROTOBUFERROR_EMPTY":        0,
		"PROTOBUFERROR_TOO_BIG":      1,
		"PROTOBUFERROR_PARSE_FAILED": 2,
		"PROTOBUFERROR_NULLPTR":      3,
	}
)

func (x ProtobufError) Enum() *ProtobufError {
	p := new(ProtobufError)
	*p = x
	return p
}

func (x ProtobufError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtobufError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[2].Descriptor()
}

func (ProtobufError) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[2]
}

func (x ProtobufError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtobufError.Descriptor instead.
func (ProtobufError) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{2}
}

type OpenSSLConfigurationError int32

const (
	OpenSSLConfigurationError_OPENSSLCONFIGURATIONERROR_UNSUPPORTED_IMPLEMENTATION   OpenSSLConfigurationError = 0
	OpenSSLConfigurationError_OPENSSLCONFIGURATIONERROR_INVALID_CASE                 OpenSSLConfigurationError = 1
	OpenSSLConfigurationError_OPENSSLCONFIGURATIONERROR_EMPTY                        OpenSSLConfigurationError = 2
	OpenSSLConfigurationError_OPENSSLCONFIGURATIONERROR_UNSUPPORTED_PROTOCOL_VERSION OpenSSLConfigurationError = 3
	OpenSSLConfigurationError_OPENSSLCONFIGURATIONERROR_INVALID                      OpenSSLConfigurationError = 4
)

// Enum value maps for OpenSSLConfigurationError.
var (
	OpenSSLConfigurationError_name = map[int32]string{
		0: "OPENSSLCONFIGURATIONERROR_UNSUPPORTED_IMPLEMENTATION",
		1: "OPENSSLCONFIGURATIONERROR_INVALID_CASE",
		2: "OPENSSLCONFIGURATIONERROR_EMPTY",
		3: "OPENSSLCONFIGURATIONERROR_UNSUPPORTED_PROTOCOL_VERSION",
		4: "OPENSSLCONFIGURATIONERROR_INVALID",
	}
	OpenSSLConfigurationError_value = map[string]int32{
		"OPENSSLCONFIGURATIONERROR_UNSUPPORTED_IMPLEMENTATION":   0,
		"OPENSSLCONFIGURATIONERROR_INVALID_CASE":                 1,
		"OPENSSLCONFIGURATIONERROR_EMPTY":                        2,
		"OPENSSLCONFIGURATIONERROR_UNSUPPORTED_PROTOCOL_VERSION": 3,
		"OPENSSLCONFIGURATIONERROR_INVALID":                      4,
	}
)

func (x OpenSSLConfigurationError) Enum() *OpenSSLConfigurationError {
	p := new(OpenSSLConfigurationError)
	*p = x
	return p
}

func (x OpenSSLConfigurationError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenSSLConfigurationError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[3].Descriptor()
}

func (OpenSSLConfigurationError) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[3]
}

func (x OpenSSLConfigurationError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenSSLConfigurationError.Descriptor instead.
func (OpenSSLConfigurationError) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{3}
}

type OpenSSLClientConfigurationError int32

const (
	OpenSSLClientConfigurationError_OPENSSLCLIENTCONFIGURATIONERROR_EMPTY          OpenSSLClientConfigurationError = 0
	OpenSSLClientConfigurationError_OPENSSLCLIENTCONFIGURATIONERROR_SSL_CTX_FAILED OpenSSLClientConfigurationError = 1
	OpenSSLClientConfigurationError_OPENSSLCLIENTCONFIGURATIONERROR_CERTIFICATE    OpenSSLClientConfigurationError = 2
	OpenSSLClientConfigurationError_OPENSSLCLIENTCONFIGURATIONERROR_KEM            OpenSSLClientConfigurationError = 3
	OpenSSLClientConfigurationError_OPENSSLCLIENTCONFIGURATIONERROR_FLAGS          OpenSSLClientConfigurationError = 4
	OpenSSLClientConfigurationError_OPENSSLCLIENTCONFIGURATIONERROR_SSL_FAILED     OpenSSLClientConfigurationError = 5
	OpenSSLClientConfigurationError_OPENSSLCLIENTCONFIGURATIONERROR_BIO_FAILED     OpenSSLClientConfigurationError = 6
)

// Enum value maps for OpenSSLClientConfigurationError.
var (
	OpenSSLClientConfigurationError_name = map[int32]string{
		0: "OPENSSLCLIENTCONFIGURATIONERROR_EMPTY",
		1: "OPENSSLCLIENTCONFIGURATIONERROR_SSL_CTX_FAILED",
		2: "OPENSSLCLIENTCONFIGURATIONERROR_CERTIFICATE",
		3: "OPENSSLCLIENTCONFIGURATIONERROR_KEM",
		4: "OPENSSLCLIENTCONFIGURATIONERROR_FLAGS",
		5: "OPENSSLCLIENTCONFIGURATIONERROR_SSL_FAILED",
		6: "OPENSSLCLIENTCONFIGURATIONERROR_BIO_FAILED",
	}
	OpenSSLClientConfigurationError_value = map[string]int32{
		"OPENSSLCLIENTCONFIGURATIONERROR_EMPTY":          0,
		"OPENSSLCLIENTCONFIGURATIONERROR_SSL_CTX_FAILED": 1,
		"OPENSSLCLIENTCONFIGURATIONERROR_CERTIFICATE":    2,
		"OPENSSLCLIENTCONFIGURATIONERROR_KEM":            3,
		"OPENSSLCLIENTCONFIGURATIONERROR_FLAGS":          4,
		"OPENSSLCLIENTCONFIGURATIONERROR_SSL_FAILED":     5,
		"OPENSSLCLIENTCONFIGURATIONERROR_BIO_FAILED":     6,
	}
)

func (x OpenSSLClientConfigurationError) Enum() *OpenSSLClientConfigurationError {
	p := new(OpenSSLClientConfigurationError)
	*p = x
	return p
}

func (x OpenSSLClientConfigurationError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenSSLClientConfigurationError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[4].Descriptor()
}

func (OpenSSLClientConfigurationError) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[4]
}

func (x OpenSSLClientConfigurationError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenSSLClientConfigurationError.Descriptor instead.
func (OpenSSLClientConfigurationError) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{4}
}

type OpenSSLServerConfigurationError int32

const (
	OpenSSLServerConfigurationError_OPENSSLSERVERCONFIGURATIONERROR_EMPTY          OpenSSLServerConfigurationError = 0
	OpenSSLServerConfigurationError_OPENSSLSERVERCONFIGURATIONERROR_SSL_CTX_FAILED OpenSSLServerConfigurationError = 1
	OpenSSLServerConfigurationError_OPENSSLSERVERCONFIGURATIONERROR_CERTIFICATE    OpenSSLServerConfigurationError = 2
	OpenSSLServerConfigurationError_OPENSSLSERVERCONFIGURATIONERROR_KEM            OpenSSLServerConfigurationError = 3
	OpenSSLServerConfigurationError_OPENSSLSERVERCONFIGURATIONERROR_FLAGS          OpenSSLServerConfigurationError = 4
	OpenSSLServerConfigurationError_OPENSSLSERVERCONFIGURATIONERROR_PRIVATE_KEY    OpenSSLServerConfigurationError = 5
	OpenSSLServerConfigurationError_OPENSSLSERVERCONFIGURATIONERROR_SSL_FAILED     OpenSSLServerConfigurationError = 6
	OpenSSLServerConfigurationError_OPENSSLSERVERCONFIGURATIONERROR_BIO_FAILED     OpenSSLServerConfigurationError = 7
)

// Enum value maps for OpenSSLServerConfigurationError.
var (
	OpenSSLServerConfigurationError_name = map[int32]string{
		0: "OPENSSLSERVERCONFIGURATIONERROR_EMPTY",
		1: "OPENSSLSERVERCONFIGURATIONERROR_SSL_CTX_FAILED",
		2: "OPENSSLSERVERCONFIGURATIONERROR_CERTIFICATE",
		3: "OPENSSLSERVERCONFIGURATIONERROR_KEM",
		4: "OPENSSLSERVERCONFIGURATIONERROR_FLAGS",
		5: "OPENSSLSERVERCONFIGURATIONERROR_PRIVATE_KEY",
		6: "OPENSSLSERVERCONFIGURATIONERROR_SSL_FAILED",
		7: "OPENSSLSERVERCONFIGURATIONERROR_BIO_FAILED",
	}
	OpenSSLServerConfigurationError_value = map[string]int32{
		"OPENSSLSERVERCONFIGURATIONERROR_EMPTY":          0,
		"OPENSSLSERVERCONFIGURATIONERROR_SSL_CTX_FAILED": 1,
		"OPENSSLSERVERCONFIGURATIONERROR_CERTIFICATE":    2,
		"OPENSSLSERVERCONFIGURATIONERROR_KEM":            3,
		"OPENSSLSERVERCONFIGURATIONERROR_FLAGS":          4,
		"OPENSSLSERVERCONFIGURATIONERROR_PRIVATE_KEY":    5,
		"OPENSSLSERVERCONFIGURATIONERROR_SSL_FAILED":     6,
		"OPENSSLSERVERCONFIGURATIONERROR_BIO_FAILED":     7,
	}
)

func (x OpenSSLServerConfigurationError) Enum() *OpenSSLServerConfigurationError {
	p := new(OpenSSLServerConfigurationError)
	*p = x
	return p
}

func (x OpenSSLServerConfigurationError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenSSLServerConfigurationError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[5].Descriptor()
}

func (OpenSSLServerConfigurationError) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[5]
}

func (x OpenSSLServerConfigurationError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenSSLServerConfigurationError.Descriptor instead.
func (OpenSSLServerConfigurationError) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{5}
}

type CertificateError int32

const (
	CertificateError_CERTIFICATEERROR_MALFORMED   CertificateError = 0
	CertificateError_CERTIFICATEERROR_EXPIRED     CertificateError = 1
	CertificateError_CERTIFICATEERROR_NOT_FOUND   CertificateError = 2
	CertificateError_CERTIFICATEERROR_UNKNOWN     CertificateError = 3
	CertificateError_CERTIFICATEERROR_UNSUPPORTED CertificateError = 4
)

// Enum value maps for CertificateError.
var (
	CertificateError_name = map[int32]string{
		0: "CERTIFICATEERROR_MALFORMED",
		1: "CERTIFICATEERROR_EXPIRED",
		2: "CERTIFICATEERROR_NOT_FOUND",
		3: "CERTIFICATEERROR_UNKNOWN",
		4: "CERTIFICATEERROR_UNSUPPORTED",
	}
	CertificateError_value = map[string]int32{
		"CERTIFICATEERROR_MALFORMED":   0,
		"CERTIFICATEERROR_EXPIRED":     1,
		"CERTIFICATEERROR_NOT_FOUND":   2,
		"CERTIFICATEERROR_UNKNOWN":     3,
		"CERTIFICATEERROR_UNSUPPORTED": 4,
	}
)

func (x CertificateError) Enum() *CertificateError {
	p := new(CertificateError)
	*p = x
	return p
}

func (x CertificateError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[6].Descriptor()
}

func (CertificateError) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[6]
}

func (x CertificateError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateError.Descriptor instead.
func (CertificateError) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{6}
}

type PrivateKeyError int32

const (
	PrivateKeyError_PRIVATEKEYERROR_MALFORMED   PrivateKeyError = 0
	PrivateKeyError_PRIVATEKEYERROR_NOT_FOUND   PrivateKeyError = 1
	PrivateKeyError_PRIVATEKEYERROR_UNKNOWN     PrivateKeyError = 2
	PrivateKeyError_PRIVATEKEYERROR_UNSUPPORTED PrivateKeyError = 3
	PrivateKeyError_PRIVATEKEYERROR_NOT_SERVER  PrivateKeyError = 4
)

// Enum value maps for PrivateKeyError.
var (
	PrivateKeyError_name = map[int32]string{
		0: "PRIVATEKEYERROR_MALFORMED",
		1: "PRIVATEKEYERROR_NOT_FOUND",
		2: "PRIVATEKEYERROR_UNKNOWN",
		3: "PRIVATEKEYERROR_UNSUPPORTED",
		4: "PRIVATEKEYERROR_NOT_SERVER",
	}
	PrivateKeyError_value = map[string]int32{
		"PRIVATEKEYERROR_MALFORMED":   0,
		"PRIVATEKEYERROR_NOT_FOUND":   1,
		"PRIVATEKEYERROR_UNKNOWN":     2,
		"PRIVATEKEYERROR_UNSUPPORTED": 3,
		"PRIVATEKEYERROR_NOT_SERVER":  4,
	}
)

func (x PrivateKeyError) Enum() *PrivateKeyError {
	p := new(PrivateKeyError)
	*p = x
	return p
}

func (x PrivateKeyError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrivateKeyError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[7].Descriptor()
}

func (PrivateKeyError) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[7]
}

func (x PrivateKeyError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrivateKeyError.Descriptor instead.
func (PrivateKeyError) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{7}
}

type ASN1Error int32

const (
	ASN1Error_ASN1ERROR_INVALID_FORMAT ASN1Error = 0
	ASN1Error_ASN1ERROR_MALFORMED      ASN1Error = 1
)

// Enum value maps for ASN1Error.
var (
	ASN1Error_name = map[int32]string{
		0: "ASN1ERROR_INVALID_FORMAT",
		1: "ASN1ERROR_MALFORMED",
	}
	ASN1Error_value = map[string]int32{
		"ASN1ERROR_INVALID_FORMAT": 0,
		"ASN1ERROR_MALFORMED":      1,
	}
)

func (x ASN1Error) Enum() *ASN1Error {
	p := new(ASN1Error)
	*p = x
	return p
}

func (x ASN1Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ASN1Error) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[8].Descriptor()
}

func (ASN1Error) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[8]
}

func (x ASN1Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ASN1Error.Descriptor instead.
func (ASN1Error) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{8}
}

type DataSourceError int32

const (
	DataSourceError_DATASOURCEERROR_EMPTY        DataSourceError = 0
	DataSourceError_DATASOURCEERROR_INVALID_CASE DataSourceError = 1
	DataSourceError_DATASOURCEERROR_NOT_FOUND    DataSourceError = 2
)

// Enum value maps for DataSourceError.
var (
	DataSourceError_name = map[int32]string{
		0: "DATASOURCEERROR_EMPTY",
		1: "DATASOURCEERROR_INVALID_CASE",
		2: "DATASOURCEERROR_NOT_FOUND",
	}
	DataSourceError_value = map[string]int32{
		"DATASOURCEERROR_EMPTY":        0,
		"DATASOURCEERROR_INVALID_CASE": 1,
		"DATASOURCEERROR_NOT_FOUND":    2,
	}
)

func (x DataSourceError) Enum() *DataSourceError {
	p := new(DataSourceError)
	*p = x
	return p
}

func (x DataSourceError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSourceError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[9].Descriptor()
}

func (DataSourceError) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[9]
}

func (x DataSourceError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSourceError.Descriptor instead.
func (DataSourceError) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{9}
}

type KEMError int32

const (
	KEMError_KEMERROR_INVALID  KEMError = 0
	KEMError_KEMERROR_TOO_MANY KEMError = 1
)

// Enum value maps for KEMError.
var (
	KEMError_name = map[int32]string{
		0: "KEMERROR_INVALID",
		1: "KEMERROR_TOO_MANY",
	}
	KEMError_value = map[string]int32{
		"KEMERROR_INVALID":  0,
		"KEMERROR_TOO_MANY": 1,
	}
)

func (x KEMError) Enum() *KEMError {
	p := new(KEMError)
	*p = x
	return p
}

func (x KEMError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KEMError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[10].Descriptor()
}

func (KEMError) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[10]
}

func (x KEMError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KEMError.Descriptor instead.
func (KEMError) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{10}
}

type SystemError int32

const (
	SystemError_SYSTEMERROR_MEMORY           SystemError = 0
	SystemError_SYSTEMERROR_INTEGER_OVERFLOW SystemError = 1
)

// Enum value maps for SystemError.
var (
	SystemError_name = map[int32]string{
		0: "SYSTEMERROR_MEMORY",
		1: "SYSTEMERROR_INTEGER_OVERFLOW",
	}
	SystemError_value = map[string]int32{
		"SYSTEMERROR_MEMORY":           0,
		"SYSTEMERROR_INTEGER_OVERFLOW": 1,
	}
)

func (x SystemError) Enum() *SystemError {
	p := new(SystemError)
	*p = x
	return p
}

func (x SystemError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[11].Descriptor()
}

func (SystemError) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[11]
}

func (x SystemError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemError.Descriptor instead.
func (SystemError) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{11}
}

type SocketError int32

const (
	SocketError_SOCKETERROR_BAD_FD             SocketError = 0
	SocketError_SOCKETERROR_CREATION_FAILED    SocketError = 1
	SocketError_SOCKETERROR_BAD_NETADDR        SocketError = 2
	SocketError_SOCKETERROR_NETADDR_UNKNOWN    SocketError = 3
	SocketError_SOCKETERROR_FSTAT_FAILED       SocketError = 4
	SocketError_SOCKETERROR_NOT_SOCK           SocketError = 5
	SocketError_SOCKETERROR_GETSOCKNAME_FAILED SocketError = 6
	SocketError_SOCKETERROR_SETSOCKOPT_FAILED  SocketError = 7
	SocketError_SOCKETERROR_INVALID_AI_FAMILY  SocketError = 8
)

// Enum value maps for SocketError.
var (
	SocketError_name = map[int32]string{
		0: "SOCKETERROR_BAD_FD",
		1: "SOCKETERROR_CREATION_FAILED",
		2: "SOCKETERROR_BAD_NETADDR",
		3: "SOCKETERROR_NETADDR_UNKNOWN",
		4: "SOCKETERROR_FSTAT_FAILED",
		5: "SOCKETERROR_NOT_SOCK",
		6: "SOCKETERROR_GETSOCKNAME_FAILED",
		7: "SOCKETERROR_SETSOCKOPT_FAILED",
		8: "SOCKETERROR_INVALID_AI_FAMILY",
	}
	SocketError_value = map[string]int32{
		"SOCKETERROR_BAD_FD":             0,
		"SOCKETERROR_CREATION_FAILED":    1,
		"SOCKETERROR_BAD_NETADDR":        2,
		"SOCKETERROR_NETADDR_UNKNOWN":    3,
		"SOCKETERROR_FSTAT_FAILED":       4,
		"SOCKETERROR_NOT_SOCK":           5,
		"SOCKETERROR_GETSOCKNAME_FAILED": 6,
		"SOCKETERROR_SETSOCKOPT_FAILED":  7,
		"SOCKETERROR_INVALID_AI_FAMILY":  8,
	}
)

func (x SocketError) Enum() *SocketError {
	p := new(SocketError)
	*p = x
	return p
}

func (x SocketError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocketError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[12].Descriptor()
}

func (SocketError) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[12]
}

func (x SocketError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SocketError.Descriptor instead.
func (SocketError) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{12}
}

type ErrorKind int32

const (
	ErrorKind_ERRORKIND_API                          ErrorKind = 0
	ErrorKind_ERRORKIND_CONFIGURATION                ErrorKind = 1
	ErrorKind_ERRORKIND_OPENSSL_CONFIGURATION        ErrorKind = 2
	ErrorKind_ERRORKIND_OPENSSL_CLIENT_CONFIGURATION ErrorKind = 3
	ErrorKind_ERRORKIND_OPENSSL_SERVER_CONFIGURATION ErrorKind = 4
	ErrorKind_ERRORKIND_CERTIFICATE                  ErrorKind = 5
	ErrorKind_ERRORKIND_SYSTEM                       ErrorKind = 6
	ErrorKind_ERRORKIND_SOCKET                       ErrorKind = 7
	ErrorKind_ERRORKIND_PROTOBUF                     ErrorKind = 8
	ErrorKind_ERRORKIND_PRIVATE_KEY                  ErrorKind = 9
	ErrorKind_ERRORKIND_ASN1                         ErrorKind = 10
	ErrorKind_ERRORKIND_DATA_SOURCE                  ErrorKind = 11
	ErrorKind_ERRORKIND_KEM                          ErrorKind = 12
)

// Enum value maps for ErrorKind.
var (
	ErrorKind_name = map[int32]string{
		0:  "ERRORKIND_API",
		1:  "ERRORKIND_CONFIGURATION",
		2:  "ERRORKIND_OPENSSL_CONFIGURATION",
		3:  "ERRORKIND_OPENSSL_CLIENT_CONFIGURATION",
		4:  "ERRORKIND_OPENSSL_SERVER_CONFIGURATION",
		5:  "ERRORKIND_CERTIFICATE",
		6:  "ERRORKIND_SYSTEM",
		7:  "ERRORKIND_SOCKET",
		8:  "ERRORKIND_PROTOBUF",
		9:  "ERRORKIND_PRIVATE_KEY",
		10: "ERRORKIND_ASN1",
		11: "ERRORKIND_DATA_SOURCE",
		12: "ERRORKIND_KEM",
	}
	ErrorKind_value = map[string]int32{
		"ERRORKIND_API":                          0,
		"ERRORKIND_CONFIGURATION":                1,
		"ERRORKIND_OPENSSL_CONFIGURATION":        2,
		"ERRORKIND_OPENSSL_CLIENT_CONFIGURATION": 3,
		"ERRORKIND_OPENSSL_SERVER_CONFIGURATION": 4,
		"ERRORKIND_CERTIFICATE":                  5,
		"ERRORKIND_SYSTEM":                       6,
		"ERRORKIND_SOCKET":                       7,
		"ERRORKIND_PROTOBUF":                     8,
		"ERRORKIND_PRIVATE_KEY":                  9,
		"ERRORKIND_ASN1":                         10,
		"ERRORKIND_DATA_SOURCE":                  11,
		"ERRORKIND_KEM":                          12,
	}
)

func (x ErrorKind) Enum() *ErrorKind {
	p := new(ErrorKind)
	*p = x
	return p
}

func (x ErrorKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorKind) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_errors_proto_enumTypes[13].Descriptor()
}

func (ErrorKind) Type() protoreflect.EnumType {
	return &file_proto_errors_proto_enumTypes[13]
}

func (x ErrorKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorKind.Descriptor instead.
func (ErrorKind) EnumDescriptor() ([]byte, []int) {
	return file_proto_errors_proto_rawDescGZIP(), []int{13}
}

var File_proto_errors_proto protoreflect.FileDescriptor

var file_proto_errors_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x61, 0x71, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x50, 0x0a, 0x08, 0x41, 0x50, 0x49, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x49, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x50, 0x49, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x43,
	0x4b, 0x45, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x50, 0x49, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x02, 0x2a, 0x96, 0x01, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x31, 0x0a, 0x2d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x02, 0x2a, 0x7e, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x42, 0x55, 0x46, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x42, 0x55, 0x46, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x50, 0x54,
	0x52, 0x10, 0x03, 0x2a, 0x89, 0x02, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53, 0x4c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x38, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x53, 0x4c, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x4f,
	0x50, 0x45, 0x4e, 0x53, 0x53, 0x4c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x43, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x4e, 0x53,
	0x53, 0x4c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x02, 0x12, 0x3a, 0x0a, 0x36,
	0x4f, 0x50, 0x45, 0x4e, 0x53, 0x53, 0x4c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x4e,
	0x53, 0x53, 0x4c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x2a,
	0xe5, 0x02, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53, 0x4c, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x53, 0x4c, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x32,
	0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x53, 0x4c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x43, 0x54, 0x58, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x53, 0x4c, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x53, 0x4c, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4b, 0x45, 0x4d, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25,
	0x4f, 0x50, 0x45, 0x4e, 0x53, 0x53, 0x4c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x46, 0x4c, 0x41, 0x47, 0x53, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x53,
	0x53, 0x4c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x53,
	0x53, 0x4c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x49, 0x4f, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x96, 0x03, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x6e,
	0x53, 0x53, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x25, 0x4f,
	0x50, 0x45, 0x4e, 0x53, 0x53, 0x4c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45,
	0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x53,
	0x4c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x43, 0x54,
	0x58, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x50,
	0x45, 0x4e, 0x53, 0x53, 0x4c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x4f,
	0x50, 0x45, 0x4e, 0x53, 0x53, 0x4c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4b,
	0x45, 0x4d, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x53, 0x4c, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x10, 0x04, 0x12,
	0x2f, 0x0a, 0x2b, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x53, 0x4c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x05,
	0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x53, 0x4c, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x53, 0x4c, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x42, 0x49, 0x4f, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07,
	0x2a, 0xb0, 0x01, 0x0a, 0x10, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52,
	0x4d, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x03, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x2a, 0xad, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x4b, 0x45, 0x59, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x4f,
	0x52, 0x4d, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x4b, 0x45, 0x59, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x4b, 0x45, 0x59, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x4b, 0x45, 0x59,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x4b, 0x45,
	0x59, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x10, 0x04, 0x2a, 0x42, 0x0a, 0x09, 0x41, 0x53, 0x4e, 0x31, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x1c, 0x0a, 0x18, 0x41, 0x53, 0x4e, 0x31, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x53, 0x4e, 0x31, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x4c, 0x46,
	0x4f, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x6d, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41,
	0x54, 0x41, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x4d,
	0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x41, 0x54, 0x41, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x43, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x41, 0x54, 0x41, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0x37, 0x0a, 0x08, 0x4b, 0x45, 0x4d, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x45, 0x4d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x45, 0x4d, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x2a,
	0x47, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x5f, 0x4f, 0x56,
	0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x2a, 0xa6, 0x02, 0x0a, 0x0b, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x43, 0x4b,
	0x45, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x46, 0x44, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x41, 0x44, 0x44, 0x52, 0x10, 0x02, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x45,
	0x54, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4f, 0x43, 0x4b, 0x45,
	0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x53, 0x4f, 0x43, 0x4b, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x4f, 0x43, 0x4b, 0x45, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x53, 0x4f,
	0x43, 0x4b, 0x4f, 0x50, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x21,
	0x0a, 0x1d, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x49, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x10,
	0x08, 0x2a, 0xf4, 0x02, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x50, 0x49,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x23, 0x0a, 0x1f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x53, 0x53, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x53, 0x53, 0x4c, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x2a, 0x0a, 0x26, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x06, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x45,
	0x54, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x5f, 0x4b, 0x45, 0x59, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x41, 0x53, 0x4e, 0x31, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x4b, 0x45, 0x4d, 0x10, 0x0c, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x2d, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x2f, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_errors_proto_rawDescOnce sync.Once
	file_proto_errors_proto_rawDescData = file_proto_errors_proto_rawDesc
)

func file_proto_errors_proto_rawDescGZIP() []byte {
	file_proto_errors_proto_rawDescOnce.Do(func() {
		file_proto_errors_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_errors_proto_rawDescData)
	})
	return file_proto_errors_proto_rawDescData
}

var file_proto_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_proto_errors_proto_goTypes = []interface{}{
	(APIError)(0),                        // 0: saq.sandwich.proto.APIError
	(ConfigurationError)(0),              // 1: saq.sandwich.proto.ConfigurationError
	(ProtobufError)(0),                   // 2: saq.sandwich.proto.ProtobufError
	(OpenSSLConfigurationError)(0),       // 3: saq.sandwich.proto.OpenSSLConfigurationError
	(OpenSSLClientConfigurationError)(0), // 4: saq.sandwich.proto.OpenSSLClientConfigurationError
	(OpenSSLServerConfigurationError)(0), // 5: saq.sandwich.proto.OpenSSLServerConfigurationError
	(CertificateError)(0),                // 6: saq.sandwich.proto.CertificateError
	(PrivateKeyError)(0),                 // 7: saq.sandwich.proto.PrivateKeyError
	(ASN1Error)(0),                       // 8: saq.sandwich.proto.ASN1Error
	(DataSourceError)(0),                 // 9: saq.sandwich.proto.DataSourceError
	(KEMError)(0),                        // 10: saq.sandwich.proto.KEMError
	(SystemError)(0),                     // 11: saq.sandwich.proto.SystemError
	(SocketError)(0),                     // 12: saq.sandwich.proto.SocketError
	(ErrorKind)(0),                       // 13: saq.sandwich.proto.ErrorKind
}
var file_proto_errors_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_errors_proto_init() }
func file_proto_errors_proto_init() {
	if File_proto_errors_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_errors_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_errors_proto_goTypes,
		DependencyIndexes: file_proto_errors_proto_depIdxs,
		EnumInfos:         file_proto_errors_proto_enumTypes,
	}.Build()
	File_proto_errors_proto = out.File
	file_proto_errors_proto_rawDesc = nil
	file_proto_errors_proto_goTypes = nil
	file_proto_errors_proto_depIdxs = nil
}
