// Copyright 2023 SandboxAQ
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package saq.sandwich.proto.api.v1;

option go_package = "github.com/sandbox-quantum/sandwich/go/proto/sandwich/api/v1";

// Whether to allow or forbid classical algorithms. We define "classical algorithms" as something that isn't quantum-safe, like ECC.
enum ClassicalAlgoChoice {
  CLASSICAL_ALGORITHMS_FORBID = 0;
  CLASSICAL_ALGORITHMS_ALLOW = 1;
};

// Whether to allow or forbid quantum-safe algorithms.
enum QuantumSafeAlgoChoice {
  QUANTUM_SAFE_ALGORITHMS_ALLOW = 0;
  QUANTUM_SAFE_ALGORITHMS_FORBID = 1;
};

// Whether to allow or forbid hybrid algorithms. In this context "hybrid" means a combination of a quantum-safe algorithm and a classical one.
enum HybridAlgoChoice {
  HYBRID_ALGORITHMS_ALLOW = 0;
  HYBRID_ALGORITHMS_FORBID = 1;
};

// The desired security level expressed as "bit strength".
enum NISTSecurityStrengthBits {
  BIT_STRENGTH_AT_LEAST_128 = 0;
  BIT_STRENGTH_AT_LEAST_192 = 1;
  BIT_STRENGTH_AT_LEAST_256 = 2;
};

// Compliance lists high level security constraints on the choice of algorithms within a Sandwich configuration.
// If a Sandwich configuration specifies algorithms that violate those constraints, an error will be returned.
message Compliance {
  HybridAlgoChoice hybrid_choice = 1;
  QuantumSafeAlgoChoice quantum_safe_choice = 2;
  ClassicalAlgoChoice classical_choice = 3;
  NISTSecurityStrengthBits bit_strength_choice = 4;
};
