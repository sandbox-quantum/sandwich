// Copyright (c) SandboxAQ. All rights reserved.
// SPDX-License-Identifier: AGPL-3.0-only

syntax = "proto3";

package saq.sandwich.proto.api.v1;

option go_package = "github.com/sandbox-quantum/sandwich/go/proto/sandwich/api/v1";

import "pysandwich/proto/api/v1/certificate.proto";

// An empty verifier.
//
// An empty verifier is typically used when no verification of the remote
// peer is necessary (for instance in a non mutual TLS connection, the server
// does not have to verify the client's identity).
//
// > **Warning**: if used in a context where a verification may happen, any
// > result will be discarded!
message EmptyVerifier {}

// Verifier for X.509-based protocols such as TLS.
//
// When `X509Verifier` is used as the peer verifier in
// [TLSOptions](TLSOptions.md), the following security requirements are
// enforced:
//  - Partial certificate chains are forbidden
//  - CA certificates must include the key usage extension (`keyUsage`), and
//  must
//    have the `keyCertSign` usage.
//
// Some other default parameters are set to be as close as possible to RFC 5280.
message X509Verifier {
  // List of trusted certificate authority certificates.
  //
  // Items of this list can also contain several certificates at once.
  // For example, "/etc/ssl/cert.pem" usually contains more that one CA. If this
  // file is given, Sandwich will read them all.
  //
  // See [Certificate](Certificate.md).
  repeated Certificate trusted_cas = 1;

  // Allow expired certificates.
  //
  // If true, no error is returned if an expired certificate is present in the
  // chain of certificates.
  //
  // Default: false.
  bool allow_expired_certificate = 4;

  // Maximum depth of a certificate chain.
  // The leaf certificate is ignored when counting certificates.
  //
  // Default: 100.
  uint32 max_verify_depth = 5;
}

// A Subject Alternative Names entry.
message SANMatcher {
  // The entry.
  oneof san {
    // An email address.
    string email = 1;

    // An hostname, aka a DNS name.
    string dns = 2;

    // An IP address.
    //
    // This type allows either an IPv4 address or an IPv6 address.
    // Ranges and masks are not allowed.
    string ip_address = 3;
  }
}

// Subject Alternative Names verifier.
//
// This verifier is used when a tunnel is created in Sandwich. It is responsible
// for verifying that the identity presented by the remote peer matches the
// expected identity.
//
// This is commonly used to verify the server's name in a TLS connection and
// to prevent mallory-in-the-middle attacks.
message SANVerifier {
  // Entries of expected Subject Alternative Names.
  //
  // See [SANMatcher](SANMatcher.md).
  repeated SANMatcher alt_names = 1;
}

// Security requirements to enforce at tunnel-time.
//
// Unlike the X.509 verifier, which is used when creating a context, this
// verifier is used when creating a tunnel. Thus, the security requirements
// it describes are enforced to a specific tunnel only.
message TunnelVerifier {
  // The verifier to use at tunnel-time.
  oneof verifier {
    // Subject Alternative Names verifier, to be used when the TLS protocol is
    // used.
    //
    // See [SANVerifier](SANVerifier.md).
    SANVerifier san_verifier = 1;

    // Empty verifier.
    //
    // > **Warning**: when used, no identity will be verified!
    //
    // See [EmptyVerifier](EmptyVerifier.md).
    EmptyVerifier empty_verifier = 2;
  }
}
