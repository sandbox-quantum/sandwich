diff -Nur a/callbacks.rs b/callbacks.rs
--- a/callbacks.rs	2023-02-27 18:01:59
+++ b/callbacks.rs	2023-02-27 18:08:30
@@ -45,6 +45,15 @@
         None
     }
 
+    /// This function will run for every extern variable and function. The
+    /// returned value determines the name using for linkin.
+    fn generated_link_name_override(
+        &self,
+        _item_info: ItemInfo<'_>,
+    ) -> Option<String> {
+        None
+    }
+
     /// The integer kind an integer macro should have, given a name and the
     /// value of that macro, or `None` if you want the default to be chosen.
     fn int_macro(&self, _name: &str, _value: i64) -> Option<IntKind> {
diff -Nur a/ir/function.rs b/ir/function.rs
--- a/ir/function.rs	2023-02-27 18:07:46
+++ b/ir/function.rs	2023-02-27 18:56:59
@@ -733,7 +733,13 @@
         }
         assert!(!name.is_empty(), "Empty function name.");
 
-        let mangled_name = cursor_mangling(context, &cursor);
+        let mangled_name = context.options().last_callback(|callbacks| {
+            callbacks.generated_link_name_override(ItemInfo {
+                name: name.as_str(),
+                kind: ItemKind::Function,
+            })
+        }).or_else(||cursor_mangling(context, &cursor));
+
         let comment = cursor.raw_comment();
 
         let function =
