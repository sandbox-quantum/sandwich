// Copyright 2022 SandboxAQ
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Public enums used by tunnels from the Sandwich C++ library.
syntax = "proto3";

package saq.sandwich.proto.tunnel;


// State of a tunnel.
enum State {
  // The tunnel hasn't started yet.
  // This is the initial state.
  STATE_NOT_CONNECTED = 0;

  // The connection is in progress.
  // The tunnel is waiting for the underlying I/O interface to establish
  // the connection to the remote peer.
  STATE_CONNECTION_IN_PROGRESS = 1;

  // The handshake is in progress.
  STATE_HANDSHAKE_IN_PROGRESS = 2;

  // The handshake plane is done.
  // At this point, the record plane is accessible.
  STATE_HANDSHAKE_DONE = 3;

  // The tunnel is being shutdown.
  STATE_BEING_SHUTDOWN = 4;

  // The tunnel has been disconnected.
  STATE_DISCONNECTED = 5;

  // An error occurred.
  //
  // Use `GetError` to retrieve the error.
  STATE_ERROR = 6;

  // Next id: 7
}

// State of the handshake plane.
// This state is returned by the method `Tunnel::Handshake`.
// It indicates the state of the handshake plane.
enum HandshakeState {
  // The handshake is in progress.
  // This is the initial state. At this point, you must call
  // `Tunnel::Handshake`.
  HANDSHAKESTATE_IN_PROGRESS = 0;

  // The Handshake is done. The record plane is now accessible.
  HANDSHAKESTATE_DONE = 1;

  // The underlying protocol/implementation needs to read data from the
  // I/O interface, but the latter isn't available.
  HANDSHAKESTATE_WANT_READ = 2;

  // The underlying protocol/implementation needs to write data to the
  // I/O interface, but the latter isn't available.
  HANDSHAKESTATE_WANT_WRITE = 3;

  // An error occurred.
  HANDSHAKESTATE_ERROR = 4;

  // Next id: 5
}

// Errors related to the record plane.
enum RecordError {
  // No error.
  RECORDERROR_OK = 0;

  // The underlying protocol needs to read some data from the I/O
  // interface.
  // It may indicate that the protocol has to renegociate the current
  // session.
  RECORDERROR_WANT_READ = 1;

  // The underlying protocol needs to write some data to the I/O
  // interface.
  // It may indicate that the protocol has to renegociate the current
  // session.
  RECORDERROR_WANT_WRITE = 2;

  // The tunnel is being shutdown.
  RECORDERROR_BEING_SHUTDOWN = 3;

  // The protocol has terminated the session, or the underlying I/O
  // interface is closed.
  RECORDERROR_CLOSED = 4;

  // An unknown error occurred.
  RECORDERROR_UNKNOWN = 5;

  // Next id: 6
}
