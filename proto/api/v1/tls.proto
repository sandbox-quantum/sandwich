// Copyright 2023 SandboxAQ
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package saq.sandwich.proto.api.v1;

option go_package = "github.com/sandbox-quantum/sandwich/go/proto/sandwich/api/v1";

import "proto/api/v1/certificate.proto";
import "proto/api/v1/private_key.proto";
import "proto/api/v1/verifiers.proto";

// An X.509 identity.
//
// It consists of a [certificate](Certificate.md) and its associated
// [private key](PrivateKey.md).
message X509Identity {
  // The certificate.
  //
  // See also [Certificate](Certificate.md).
  Certificate certificate = 1;

  // The private key.
  //
  // See also [PrivateKey](PrivateKey.md).
  PrivateKey private_key = 2;
}

// TLS options, for both client and server modes.
message TLSOptions {
  // The kex or kem to enforce.
  //
  // If the remote peer does not support at least one KEX algorithm specified
  // in this list, an error will be returned.
  repeated string kem = 1;

  // The verifier configuration to verify the remote peer.
  oneof peer_verifier {
    // Use an X.509 verifier.
    //
    // See [X509Verifier](X509Verifier.md).
    X509Verifier x509_verifier = 3;

    // Use an empty verifier.
    //
    // > **Warning**: when used in a context where a certificate
    // is requested from the remote peer, such as a TLS client or in mTLS,
    // no signature will be verified!
    EmptyVerifier empty_verifier = 4;
  }

  // An identity.
  //
  // In server mode, the identity is used to perform the TLS handshake
  // (the [private key](PrivateKey.md) is used to sign the transcript, and the
  // [certificate](Certificate.md) is presented to clients).
  //
  // See [X509Identity](X509Identity.md).
  X509Identity identity = 5;

  repeated string alpn_protocol = 6;

  // Next id: 7
}

// TLS options, specific to the client mode.
message TLSClientOptions {
  // Common TLS options.
  //
  // See [TLSOptions](TLSOptions.md).
  TLSOptions common_options = 1;
}

// TLS options, specific to the server mode.
message TLSServerOptions {
  // Common TLS options.
  //
  // See [TLSOptions](TLSOptions.md).
  TLSOptions common_options = 1;
}
