version: 2.1
jobs:
  run-all-tests:
    resource_class: xlarge
    docker:
      - image: "us-docker.pkg.dev/pqc-infra-test/circleci-runner/runner:latest"
        auth:
          username: _json_key
          password: $RUNNER_GCR_SA_KEY
    environment:
      BAZEL_CACHE_ARGS: "--remote_cache=https://storage.googleapis.com/bazel-cache-bucket-3100644879 --google_default_credentials"
      CC: clang-13
      CXX: clang++-13
    steps:
      - run:
          name: "Export custom environment variables"
          command: |
            echo 'export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/gcloud-service-key.json"' >> "${BASH_ENV}"
            source "${BASH_ENV}"
            echo "${BAZEL_CACHE_GCS_SA_KEY}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
      - checkout
      - run:
          name: "Run all test targets"
          command: |
            source "${BASH_ENV}"
            bazelisk test ${BAZEL_CACHE_ARGS} //...
      - run:
          name: "Test external Go integration"
          command: |
            source "${BASH_ENV}"
            bazelisk build ${BAZEL_CACHE_ARGS} sandwich_c/...

            export CGO_CFLAGS="-I$PWD -I$PWD/bazel-bin/"
            export CGO_LDFLAGS="-L$PWD/bazel-bin/rust/"
            export GO_EXAMPLE_DIR="$PWD/examples/go/echo_tls_server"
            echo "replace github.com/sandbox-quantum/sandwich/go => $PWD/go" >>"$GO_EXAMPLE_DIR/go.mod"
            echo "replace github.com/sandbox-quantum/sandwich/go/c => $PWD/go/c" >> "$GO_EXAMPLE_DIR/go.mod"
            echo "replace github.com/sandbox-quantum/sandwich/go/errors => $PWD/go/errors" >> "$GO_EXAMPLE_DIR/go.mod"
            echo "replace github.com/sandbox-quantum/sandwich/go/io => $PWD/go/io" >> "$GO_EXAMPLE_DIR/go.mod"
            echo "replace github.com/sandbox-quantum/sandwich/go/tunnel => $PWD/go/tunnel" >> "$GO_EXAMPLE_DIR/go.mod"
            pushd "$GO_EXAMPLE_DIR" && go build && popd
      - run:
          name: "Test external Python integration"
          command: |
            source "${BASH_ENV}"
            bazelisk build ${BAZEL_CACHE_ARGS} sandwich_c/...

            python3 -m venv venv
            source venv/bin/activate
            pip install .
            SANDWICH_C_LIB="$PWD/bazel-bin/rust/libsandwich_full.so" python -c 'from pysandwich import sandwich; sandwich.sandwich()'
      - run:
          name: "Build the Rust package natively"
          command: |
            source "${BASH_ENV}"
            export CARGO_BAZELISK_EXTRA_ARGS="${BAZEL_CACHE_ARGS}"
            cargo test --release --lib -vv
  release-linux-dockerbuild:
    parameters:
      mode:
        description: "Build release mode"
        type: enum
        enum:
          - debug
          - release
        default: release
      arch:
        description: "Build machine architecture"
        type: enum
        enum:
          - arm.xlarge
          - xlarge
    machine:
      image: ubuntu-2204:2023.04.2
    resource_class: << parameters.arch >>
    steps:
      - checkout
      - run:
          name: "Compile through docker"
          command: |
            if [[ "<< parameters.mode >>" -eq "release" ]]; then
              bazelArgs=(--build-arg bazelArgs='-c opt')
            fi
            docker build . -t="sandwich" -f Dockerfile.linux "${bazelArgs[@]}"

            # TODO: Update docker vesion, the one provided does not support `--output`
            docker cp $(docker create --name sw sandwich sleep 100):/export.tar.bz2 export.tar.bz2 && docker rm sw
      - run:
          name: "Rename export"
          command: |
            finalName=sandwich_<< parameters.mode >>_$(dpkg --print-architecture)
            mkdir -p ~/export_artifacts
            mv export.tar.bz2  ~/export_artifacts/${finalName}.tar.bz2
      - store_artifacts:
          name: "Export build artifacts"
          path: ~/export_artifacts/
  release-macos:
    macos:
      xcode: 14.0.0
    resource_class: << parameters.resource >>
    parameters:
      resource:
        description: "Resource class"
        type: enum
        enum:
          - macos.m1.large.gen1
          - macos.x86.medium.gen2
      platform:
        description: "Target platform"
        type: enum
        enum:
          - macos_x86_64
          - macos_aarch64
      artifact_file_name:
        description: "Artifact file name"
        type: string
    steps:
      - checkout
      - run:
          name: "Install bazelisk"
          command: |
            curl -L --output /usr/local/bin/bazelisk "https://github.com/bazelbuild/bazelisk/releases/download/v1.17.0/bazelisk-darwin-arm64"
            chmod +x /usr/local/bin/bazelisk
      - run:
          name: "Build release"
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/gcloud-service-key.json"
            echo ${BAZEL_CACHE_GCS_SA_KEY} > ${GOOGLE_APPLICATION_CREDENTIALS}

            # Not sourced by default on macOS executor
            if [[ -f "${BASH_ENV}" ]]; then
              source "${BASH_ENV}"
            fi

            export PLATFORM_FLAG="--platforms=//common/platforms:<< parameters.platform >>"

            bazelisk build //:export \
              -c opt \
              "${PLATFORM_FLAG}" \
              --remote_cache=https://storage.googleapis.com/bazel-cache-bucket-3100644879 \
              --google_default_credentials \
              --profile=/tmp/bazel-profile-<< parameters.resource >>.gz \

            mkdir -p ~/export_artifacts
            mv "$(bazelisk cquery -c opt "${PLATFORM_FLAG}" --output=files //:export)" ~/export_artifacts/<< parameters.artifact_file_name >>
      - store_artifacts:
          name: "Export build artifacts"
          path: ~/export_artifacts/
  publish-doc:
    resource_class: xlarge
    docker:
      - image: "us-docker.pkg.dev/pqc-infra-test/circleci-runner/runner:latest"
        auth:
          username: _json_key
          password: $RUNNER_GCR_SA_KEY
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "11:6b:1d:d8:ec:fb:6a:4f:2f:17:89:59:43:d3:12:10"
      - run:
          name: "Deploy documentation"
          command: |
            DOC_HTML=$(bazelisk cquery --output files //docs:docs)
            bazelisk build //docs:docs
            ghp-import "$DOC_HTML" -p -o
workflows:
  presubmit:
    jobs:
      - run-all-tests:
          context:
            - bazel-cache
      - publish-doc:
          filters:
            branches:
              only:
                - main
      - release-linux-dockerbuild:
          name: release-linux-dockerbuild_amd64
          mode: release
          arch: xlarge
      - release-linux-dockerbuild:
          name: release-linux-dockerbuild_arm64
          mode: release
          arch: arm.xlarge
      - release-macos:
          context:
            - bazel-cache
          name: release-macos-aarch64
          resource: macos.m1.large.gen1
          platform: macos_aarch64
          artifact_file_name: "sandwich-macos-arm64.tar.bz2"
      - release-macos:
          context:
            - bazel-cache
          name: release-macos-x86_64
          resource: macos.m1.large.gen1
          platform: macos_x86_64
          artifact_file_name: "sandwich-macos-x86_64.tar.bz2"
